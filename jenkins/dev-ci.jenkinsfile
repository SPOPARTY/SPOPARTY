pipeline {
    agent any
    tools {
        nodejs "nodejs"
    }

    stages {
        stage ('[Git Clone]') {
            parallel {
                stage ('BE Clone') {
                    steps {
                        echo 'BE - Clone start'
                        dir ('backend') {
                            sh 'pwd'
                            git branch: 'backend', credentialsId: 'gitlab-eunbyeol', url: 'https://lab.ssafy.com/s10-webmobile1-sub2/S10P12A802'
                        }
                    }
                    post {
                        success {
                            echo 'BE - Success Cloned Repository'
                        }
                        failure {
                            error "BE - Fail Cloned Repository"
                        }
                    }
                }
                stage ('FE Clone') {
                    steps {
                        echo 'FE - Clone start'
                        dir ('frontend') {
                            sh 'pwd'
                            git branch: 'frontend', credentialsId: 'gitlab-eunbyeol', url: 'https://lab.ssafy.com/s10-webmobile1-sub2/S10P12A802'
                        }
                    }
                    post {
                        success {
                            echo 'FE - Success Cloned Repository'
                        }
                        failure {
                            error "FE - Fail Cloned Repository"
                        }
                    }
                }
            }
        }
        stage('[Download private file]') {
            steps {
                echo 'BE - Download private file start'
                sh 'pwd'
                withCredentials([file(credentialsId: 'application-private', variable: 'privateConfigFile')]) {
                    sh 'cp -f ${privateConfigFile}  backend/backend/src/main/resources/application-private.yml'
                }
            }
        }
        stage ('[Build]') {
            parallel {
                stage ('BE Build') {
                    steps {
                        echo 'BE - Build start'
                        dir ('backend/backend') {
                            sh'''
                                chmod +x gradlew
                                ./gradlew clean build
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'BE - Success Build'
                        }
                        failure{
                            error 'BE - Fail Build'
                        }
                    }              
                }
                stage ('FE Build') {
                    steps {
                        echo 'FE - Build start'
                        dir ('frontend/frontend'){
                            sh'''
                                npm cache clean --force
                                rm -rf node_modules package-lock.json
                                npm install --save
                                npm run build
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'FE - Success Build'
                        }
                        failure{
                            error 'FE - Fail Build'
                        }
                    }    
                }
            }

        }
        stage ('[Test]') {
            parallel {
                stage ('BE Test') {
                    steps {
                        echo 'BE - Test start'
                        dir ('backend/backend'){
                            sh'''
                                ./gradlew test
                            '''
                        }
                    }
                    post{
                        success {
                            echo 'BE - Success Test'
                        }
                        failure {
                            error 'BE - Fail Test'
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                def Author_Name = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                mattermostSend (color: 'good',
                message: "Succeeded: Job '${env.JOB_NAME}' [#${env.BUILD_NUMBER}] by ${Author_Name} (<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/6qfqc73iz7n4un3set8s6gahyc',
                channel: 'A802-Alert'
                )
            }
        }
        failure {
            script {
                def Author_Name = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                mattermostSend (color: 'danger',
                message: "Failed: Job '${env.JOB_NAME}' [#${env.BUILD_NUMBER}] by ${Author_Name} (<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/6qfqc73iz7n4un3set8s6gahyc',
                channel: 'A802-Alert'
                )
            }
        }
    }  
}