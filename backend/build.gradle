import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        springBootVer = '3.0.0'
        querydslVer = '5.0.0'
        querydslPluginVer = '1.0.10'
        springDependencyMgmtVer = '1.0.11'
        springLoadedVer = '1.2.8'
        jUnitVer = "5.5.1"
        jUnitPlatformVer = "1.5.1"
        openViduVer = "2.29.0"
        jdbcVer = "2.4.1"
        awsS3Ver = "2.2.6.RELEASE"
        jwtVer = "3.10.3"
        lombokVer = "1.18.20"
        guavaVer = "29.0-jre"
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyMgmtVer}.RELEASE"
        classpath "org.springframework:springloaded:${springLoadedVer}.RELEASE"
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVer}"
}

apply plugin: 'io.spring.dependency-management'


repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url "https://repo.spring.io/libs-release" }
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
}

group 'com.spoparty'
version '1.0-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    providedRuntime
}

processResources {
    with copySpec {
        from "src/main/resources"
        include "**/application.yml"
//        include "**/application-private.yml"
//        include "**/application*.yaml"
//        include "**/application*.properties"
        project.properties.findAll().each {
            prop ->
                if (prop.value != null) {
                    filter(ReplaceTokens, tokens: [(prop.key): String.valueOf(prop.value)])
                    filter(ReplaceTokens, tokens: [('project.' + prop.key): String.valueOf(prop.value)])
                    filter(ReplaceTokens, tokens: [('project.ext.' + prop.key): String.valueOf(prop.value)])
                }
        }
    }
}

dependencies {
    // spring framework
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-websocket")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE")
    implementation('org.springframework.boot:spring-boot-starter-data-redis')
    // smtp
    implementation("org.springframework.boot:spring-boot-starter-mail")
    // oauth2
    implementation("org.springframework.boot:spring-boot-starter-oauth2-client")

    annotationProcessor("org.springframework.boot:spring-boot-starter-data-jpa")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    developmentOnly("org.springframework.boot:spring-boot-devtools")

    // jwt
    implementation("com.auth0:java-jwt:${jwtVer}")

    // s3
    implementation("org.springframework.cloud:spring-cloud-starter-aws:${awsS3Ver}")

    // database
    implementation("org.mariadb.jdbc:mariadb-java-client:${jdbcVer}")

    // querydsl
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation "com.querydsl:querydsl-jpa:${querydslVer}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVer}:jakarta"
    //IntelliJ용
    //IntelliJ에서는 하기 annotationProcessor를 쓰면 별도의 querydsl 플러그인 및 플러그인 설정이 불필요.
    annotationProcessor("com.querydsl:querydsl-apt:${querydslVer}:jpa")

    // openvidu
    implementation("io.openvidu:openvidu-java-client:${openViduVer}")

    // commons
    implementation('commons-io:commons-io:2.6')
    implementation("org.apache.commons:commons-collections4:4.4")
    implementation("org.apache.commons:commons-lang3:3.9")

    // lombok
    implementation("org.projectlombok:lombok:${lombokVer}")
    annotationProcessor("org.projectlombok:lombok:${lombokVer}")

    // guava
    implementation("com.google.guava:guava:${guavaVer}")
    annotationProcessor("com.google.guava:guava:${guavaVer}")

    // test
    testImplementation("com.h2database:h2")

    testImplementation("com.jayway.jsonpath:json-path:2.4.0")

    testImplementation("org.springframework.security:spring-security-test")
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${jUnitVer}") {
        exclude module: 'junit-platform-commons'
    }
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${jUnitVer}")
    testRuntimeOnly("org.junit.platform:junit-platform-engine:${jUnitPlatformVer}")
    testRuntimeOnly("org.junit.platform:junit-platform-commons:${jUnitPlatformVer}")

}

test {
    processResources {
        duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
    }
    useJUnitPlatform()
}
